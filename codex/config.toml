sandbox_mode = "workspace-write"
approval_policy = "untrusted"
disable_response_storage = false

# Setting `profile` is equivalent to specifying `--profile o3` on the command
# line, though the `--profile` flag can still be used to override this value.
profile = "gpt5-codex"

[sandbox_workspace_write]
network_access = true

[model_providers.openai-chat-completions]
name = "OpenAI using Chat Completions"
base_url = "https://api.openai.com/v1"
env_key = "OPENAI_API_KEY"
wire_api = "chat"

[profiles.gpt5-codex]
model = "gpt-5-codex"
model_provider = "openai"
model_reasoning_effort = "medium"

[profiles.gpt5-codex-high]
model = "gpt-5-codex"
model_provider = "openai"
model_reasoning_effort = "high"

[profiles.gpt5]
model = "gpt-5"
model_provider = "openai"

[profiles.gpt5-high]
model = "gpt-5"
model_provider = "openai"
model_reasoning_effort = "high"

[profiles.o3]
model = "o3"
model_provider = "openai"
model_reasoning_effort = "high"
model_reasoning_summary = "detailed"

[profiles.gpt-oss]
model = "openai/gpt-oss-120b"
model_provider = "openrouter"

[profiles.zdr]
model = "o3"
model_provider = "openai"
disable_response_storage = true

[model_providers.openai]
name = "OpenAI"
base_url = "https://api.openai.com/v1"
env_key = "OPENAI_API_KEY"

[model_providers.azure]
name = "AzureOpenAI"
base_url = "https://YOUR_PROJECT_NAME.openai.azure.com/openai"
env_key = "AZURE_OPENAI_API_KEY"

[model_providers.openrouter]
name = "OpenRouter"
base_url = "https://openrouter.ai/api/v1"
env_key = "OPENROUTER_API_KEY"

[model_providers.gemini]
name = "Gemini"
base_url = "https://generativelanguage.googleapis.com/v1beta/openai"
env_key = "GEMINI_API_KEY"

[model_providers.ollama]
name = "Ollama"
base_url = "http://localhost:11434/v1"
env_key = "OLLAMA_API_KEY"

[model_providers.mistral]
name = "Mistral"
base_url = "https://api.mistral.ai/v1"
env_key = "MISTRAL_API_KEY"

[model_providers.deepseek]
name = "DeepSeek"
base_url = "https://api.deepseek.com"
env_key = "DEEPSEEK_API_KEY"

[model_providers.xai]
name = "xAI"
base_url = "https://api.x.ai/v1"
env_key = "XAI_API_KEY"

[model_providers.groq]
name = "Groq"
base_url = "https://api.groq.com/openai/v1"
env_key = "GROQ_API_KEY"

[model_providers.arceeai]
name = "ArceeAI"
base_url = "https://conductor.arcee.ai/v1"
env_key = "ARCEEAI_API_KEY"

[mcp_servers.claude-code]
command = "claude"
args = ["mcp", "serve"]
env = {}

[mcp_servers.mcp-server-firecrawl]
command = "npx"
args = ["-y", "firecrawl-mcp"]

[mcp_servers.mcp-server-firecrawl.env]
FIRECRAWL_API_KEY = "$FIRECRAWL_API_KEY"
FIRECRAWL_RETRY_MAX_ATTEMPTS = "5" 
FIRECRAWL_RETRY_INITIAL_DELAY = "2000" 
FIRECRAWL_RETRY_MAX_DELAY = "30000" 
FIRECRAWL_RETRY_BACKOFF_FACTOR = "3" 
FIRECRAWL_CREDIT_WARNING_THRESHOLD = "2000" 
FIRECRAWL_CREDIT_CRITICAL_THRESHOLD = "500"

[mcp_servers.playwright]
command = "npx"
args = ["@playwright/mcp@latest", "--executable-path", "/Applications/Google Chrome Dev.app/Contents/MacOS/Google Chrome Dev"]

